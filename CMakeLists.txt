cmake_minimum_required(VERSION 3.5)
include_directories(include)
include_directories(include/Rosalila)
set (CMAKE_CXX_STANDARD 11)
link_directories(./)
# SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")

set(CompilerFlags
LLVM_CFLAGS
LLVM_CXXFLAGS
)
foreach(CompilerFlag ${CompilerFlags})
string(REPLACE "/MDd" "/MD" ${CompilerFlag} "${${CompilerFlag}}")
endforeach()

foreach(CompilerFlag ${CompilerFlags})
string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
endforeach()

IF (UNIX AND NOT APPLE)
  link_directories(./lib)
  file(GLOB_RECURSE SOURCES "src/*.cpp" main.cpp)
  add_executable(shmup ${SOURCES})
  add_definitions(-DGLEW_STATIC)
  target_link_libraries (shmup GL GLEW SDL2 SDL2_image SDL2_ttf SDL2_mixer rosalila libsteam_api.so)
ENDIF ()

IF (APPLE)
  set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
  find_package(SDL2 REQUIRED)
  find_package(SDL2_image REQUIRED)
  find_package(SDL2_ttf REQUIRED)
  find_package(SDL2_mixer REQUIRED)
  find_package(OpenGL REQUIRED)
  include_directories(${SDL2_INCLUDE_DIR})
  include_directories(${SDL2_IMAGE_INCLUDE_DIR})
  include_directories(${SDL2_TTF_INCLUDE_DIR})
  include_directories(${SDL2_MIXER_INCLUDE_DIR})
  include_directories(${OPENGL_INCLUDE_DIR})
  file(GLOB_RECURSE SOURCES "src/*.cpp" main.cpp)
  add_executable(ShmupMacOs ${SOURCES})
  target_link_libraries (ShmupMacOs ${OPENGL_LIBRARIES} SDL2 SDL2_ttf SDL2_image SDL2_mixer libsteam_api.dylib librosalila.dylib)
  SET(CMAKE_SKIP_BUILD_RPATH FALSE)
  SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE) 
  SET(CMAKE_INSTALL_RPATH "${CMAKE_SOURCE_DIR}")
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
ENDIF ()

IF (MSVC)
  include_directories(windows_dependencies/include)
  link_directories(${CMAKE_SOURCE_DIR}/windows_dependencies/lib)
  add_definitions(-DROSALILA_STATICLIB)
  file(GLOB_RECURSE SOURCES "src/*.cpp" main.cpp)
  add_executable(shmup ${SOURCES})
  target_link_libraries (shmup rosalila.lib SDL2.lib SDL2main.lib SDL2_image.lib SDL2_mixer.lib SDL2_ttf.lib SDL2test.lib steam_api.lib glew32.lib opengl32.lib)
ENDIF ()